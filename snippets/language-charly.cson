'.source.charly':
  'if':
    'prefix': 'if'
    'body': 'if (${1:true}) {\n\t$2\n}'
  'if â€¦ else':
    'prefix': 'ife'
    'body': 'if (${1:true}) {\n\t$2\n} else {\n\t$3\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'
  'else if':
    'prefix': 'elseif'
    'body': 'else if (${1:true}) {\n\t$2\n}'
  'Function':
    'prefix': 'fun'
    'body': 'func ${1:funcName}($2) {\n\t$0\n}'
  'Anonymous Function':
    'prefix': 'f'
    'body': 'func($1) {\n\t$2\n}'
  'Lambda Function':
    'prefix': 'lf'
    'body': '->($1) {$2}'
  'Immediately-Invoked Function Expression':
    'prefix': 'iife'
    'body': '(func() {\n\t${1:\'use strict\';\n}\t$2\n}());'
  'log':
    'prefix': 'log'
    'body': 'print($1);$0'
  'try':
    'prefix': 'try'
    'body': 'try {\n\t$1\n} catch (${2:e}) {\n\t$3\n}'
  'while':
    'prefix': 'while'
    'body': 'while (${1:true}) {\n\t$2\n}'
  'Start Docblock':
    'prefix': '/**'
    'body': '/**\n * $1\n */$0'
  'Require':
    'prefix': 'req'
    'body': 'const ${1:module} = require(\'${1:module}\');'
  'Class':
    'prefix': 'class'
    'body': 'class ${1:ClassName} {\n\tproperty foo\n\n\tfunc constructor($2) {\n\t\t$3\n\t}\n}'
  'export function':
    'prefix': 'expfun'
    'body': 'export = func ($2) {\n\t${3:// body...}\n};'
  'export module':
    'prefix': 'expmod'
    'body': 'export = ${1:name};'
